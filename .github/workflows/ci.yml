name: CI

on:
  pull_request:
    branches: [ "main" ]
  push:
    branches: [ "main" ]

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout

env:
  ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/staging' && 'staging' || '' }}

jobs:
  test:
    strategy:
      matrix:
        service: [app, api]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Test ${{ matrix.service }}
      run: go test -v ./${{ matrix.service }}

  lint:
    strategy:
      matrix:
        service: [app, api]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: ${{ matrix.service }}
      uses: golangci/golangci-lint-action@v3
      with:
        version: v1.54.2
        working-directory: ${{ matrix.service }}

  build:
    strategy:
      matrix:
        service: [app, api]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.20'

    - name: Set Tag
      id: tag
      run: echo "TAG=jvitoroc17/devops-tour-${{ matrix.service }}:${{ github.sha }}" >> "$GITHUB_OUTPUT"

    - name: Build ${{ matrix.service }}
      run: docker build ./${{ matrix.service }} -t ${{ steps.tag.outputs.TAG }}

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
      if: env.ENVIRONMENT != ''

    - name: Push ${{ matrix.service }}
      run: docker push ${{ steps.tag.outputs.TAG }}
      if: env.ENVIRONMENT != ''

  deploy:
    runs-on: ubuntu-latest
    needs: [test, lint, build]
    defaults:
      run:
        working-directory: infra/environments/${{ env.ENVIRONMENT }}
    steps:
    - uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          role-to-assume: arn:aws:iam::571985155788:role/github-actions
          role-session-name: devops-tour
          aws-region: ${{ vars.AWS_REGION }}

    - uses: hashicorp/setup-terraform@v2

    - name: Terraform Init
      run: terraform init

    - name: Terraform Apply
      run: |
        export TF_VAR_IMAGE_TAG=${{ github.sha }}
        terraform apply --auto-approve
  